{"id":4504,"date":"2023-07-24T17:33:02","date_gmt":"2023-07-24T12:03:02","guid":{"rendered":"https:\/\/newwebsite.nestdigital.com\/?p=4504"},"modified":"2023-08-05T16:16:30","modified_gmt":"2023-08-05T10:46:30","slug":"fly-safely-with-do-178c","status":"publish","type":"post","link":"https:\/\/nestdigital.com\/blogs\/fly-safely-with-do-178c\/","title":{"rendered":"Fly safely with DO-178C"},"content":{"rendered":"\n<p id=\"8599\">DO-178C (henceforth DO-178C) is the primary document referenced by certification authorities including the FAA, EASA and Transport Canada to approve all commercial software-based civil aviation systems. The document is jointly published by RTCA (formerly the Radio Technical Committee for Aeronautics) and EUROCAE. <\/p>\n\n\n\n<p id=\"8599\">The rapid increase in the use of software in airborne systems and equipment used on aircraft and engines in the early 1980s resulted in a need for industry-accepted guidance for satisfying airworthiness requirements. DO-178, \u201cSoftware Considerations in Airborne Systems and Equipment Certification\u201d, was written to satisfy this need. DO-178C is a formal process standard that covers the complete software lifecycle \u2014 planning, development, and integral processes \u2014 to ensure correctness and robustness in software systems for civil airborne applications. <\/p>\n\n\n\n<p id=\"8599\">The integral processes include software verification, software quality assurance, configuration management assurance and certification liaison with the regulatory authorities. Increasingly, standards developed for the commercial aviation including DO-178C have also become recognised as best practice in the defence sector. <\/p>\n\n\n\n<p id=\"8599\">The purpose of DO-178C document is to provide guidance for the production of software for airborne systems and equipment that performs its intended function with a level of confidence in safety that complies with airworthiness requirements.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"144b\">Software Life Cycle process of DO-178C<\/h2>\n\n\n\n<p id=\"8326\">The software Life Cycle processes are applied as defined by the software planning process and the Software Development Plan. The software Life Cycle processes are<br>\u2022 Software requirements process.<br>\u2022 Software design process.<br>\u2022 Software coding process.<br>\u2022 Integration process<br>\u2022 Software verification process<br>\u2022 Software Testing Process<br>\u2022 Software Configuration Management Process<br>\u2022 Software Quality Assurance Process<br>\u2022 Certification Liaison Process<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"9a38\">Software requirement process<\/h2>\n\n\n\n<p id=\"08b1\">Software development processes produce one or more levels of software requirements. High-level requirements are produced directly through analysis of system requirements and system architecture. Usually, these high-level requirements are further developed during the software design process, thus producing one or more successive, lower levels of requirements. However, if Source Code is generated directly from high-level requirements, then the high-level requirements are also considered low-level requirements and the guidance for low-level requirements also apply. High-level requirements and low-level requirements may include derived requirements. In order to determine the effects of derived requirements on the system safety assessment and system requirements, all derived requirements should be made available to the system processes including the system safety assessment process.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"2b54\">Software design process<\/h2>\n\n\n\n<p id=\"4d2a\">The software design process inputs are the Software Requirements Data, the Software Development Plan, and the Software Design Standards. When the planned transition criteria have been satisfied, the high-level requirements are used in the design process to develop software architecture and low-level requirements. This may involve one or more lower levels of requirements. The primary output of the process is the Design Description which includes the software architecture and the low-level requirements. The software design process is complete when its objectives and the objectives of the integral processes associated with it are satisfied.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"a303\">Software Coding Process<\/h2>\n\n\n\n<p id=\"53eb\">The coding process inputs are the low-level requirements and software architecture from the software design process, the Software Development Plan, and the Software Code Standards. The software coding process may be entered or re-entered when the planned transition criteria are satisfied. This process based upon the software architecture and the low-level requirements produces the Source Code. The software coding process is complete when its objectives and the objectives of the integral processes associated with it are satisfied.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"5f05\">Software integration process<\/h2>\n\n\n\n<p id=\"cc6d\">The integration process consists of software integration and hardware\/software integration. The integration process may be entered or re-entered when the planned transition criteria have been satisfied. The integration process inputs are the software architecture from the software design process, and the Source Code from the software coding process. The outputs of the integration process are the object code, Executable Object Code, Parameter Data Item File and the compiling, linking, and loading data. The integration process is complete when its objectives and the objectives of the integral processes associated with it are satisfied.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"4769\">Software verification process<\/h2>\n\n\n\n<p id=\"7be4\">Verification is a technical assessment of the outputs of the software planning process, software development processes, and the software verification process. The software verification process is applied as defined by the software planning process and the Software Verification Plan .Verification is not simply testing. Testing, in general, cannot show the absence of errors. As a result, the following sections use the term \u201cverify\u201d instead of \u201ctest\u201d to discuss the software verification process activities, which are typically a combination of reviews, analyses, and tests.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"6143\">Software testing<\/h2>\n\n\n\n<p id=\"355c\">Software testing is used to demonstrate that the software satisfies its requirements and to demonstrate with a high degree of confidence that errors that could lead to unacceptable failure conditions, as determined by the system safety assessment process, have been removed. There are 3 types testing.<\/p>\n\n\n\n<p id=\"f2cd\">\u2022 Hardware\/software integration testing: To verify correct operation of the software in the target computer environment.<br>\u2022 Software integration testing: To verify the interrelationships between software requirements and components and to verify the implementation of the software requirements and software components within the software architecture.<br>\u2022 Low-level testing: To verify the implementation of low-level requirements.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"e523\">Software Configuration Management Process<\/h2>\n\n\n\n<p id=\"e523\">The SCM process is applied as defined by the software planning process and the Software Configuration Management Plan. Outputs of the SCM process are recorded in Software Configuration Management Records or in other software life cycle data. The SCM process includes the activities of configuration identification, change control, baseline establishment, and archiving of the software product, including the related software life cycle data. The SCM process does not stop when the software product is approved by the certification authority, but continues throughout the service life of the system or equipment. If software life cycle activities will be performed by a supplier, then configuration management activities should be applied to the supplier.<\/p>\n\n\n\n<p id=\"5812\">Software Quality Assurance Process<\/p>\n\n\n\n<p id=\"ae71\">The SQA process is applied as defined by the software planning process and the Software Quality Assurance Plan. Outputs of the SQA process activities are recorded in Software Quality Assurance Records or other software life cycle data. The SQA process assesses the software life cycle processes and their outputs to obtain assurance that objectives are satisfied, deficiencies are detected, evaluated, tracked, and resolved, and software product and software life cycle data conform to certification requirements<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"1425\">Certification Liaison Process<\/h2>\n\n\n\n<p id=\"2d34\">The objectives of the certification liaison process is to establish communication and understanding between the applicant and the certification authority throughout the software life cycle to assist the certification process. Gain agreement on the means of compliance through approval of the Plan for Software Aspects of Certification. Provide compliance substantiation. The certification liaison process is applied as defined by the software planning process and the Plan for Software Aspects of Certification.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"0f0b\">Software Certification Process<\/h2>\n\n\n\n<p id=\"88ca\">The certification authority assesses the Plan for Software Aspects of Certification for completeness and consistency with the means of compliance that was agreed upon to satisfy the certification basis. The certification authority satisfies itself that the software level(s) proposed by the applicant is consistent with the outputs of the system safety assessment process and other system life cycle data. The certification authority informs the applicant of issues with the proposed software plans that need to be satisfied prior to the certification authority agreement.<\/p>\n\n\n\n<p id=\"73da\">Reference:<br>DO-178C Document By RTCA<\/p>\n","protected":false},"excerpt":{"rendered":"<p>DO-178C (henceforth DO-178C) is the primary document referenced by certification authorities including the FAA, EASA and Transport Canada to approve all commercial software-based civil aviation systems. The document is jointly published by RTCA (formerly the Radio Technical Committee for Aeronautics) and EUROCAE. The rapid increase in the use of software in airborne systems and equipment [&hellip;]<\/p>\n","protected":false},"author":8,"featured_media":4505,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"footnotes":"","wds_primary_category":16},"categories":[16],"tags":[38],"blocksy_meta":"","_links":{"self":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts\/4504"}],"collection":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/users\/8"}],"replies":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/comments?post=4504"}],"version-history":[{"count":0,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts\/4504\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/media\/4505"}],"wp:attachment":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/media?parent=4504"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/categories?post=4504"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/tags?post=4504"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}