{"id":3992,"date":"2023-07-24T09:58:12","date_gmt":"2023-07-24T04:28:12","guid":{"rendered":"https:\/\/newwebsite.nestdigital.com\/?p=3992"},"modified":"2023-08-05T16:24:22","modified_gmt":"2023-08-05T10:54:22","slug":"realtime-temperature-analytics-using-kafka-streams","status":"publish","type":"post","link":"https:\/\/nestdigital.com\/blogs\/realtime-temperature-analytics-using-kafka-streams\/","title":{"rendered":"Realtime Temperature Analytics using Kafka Streams"},"content":{"rendered":"\n<blockquote class=\"wp-block-quote\">\n<p><em>Life is a series of natural and spontaneous changes. Don\u2019t resist them -that only creates sorrow. Let reality be reality. Let things flow naturally forward.<\/em><\/p>\n<cite><em>\u2014 Lao-Tzu, 6th\u20135th century BCE<\/em><\/cite><\/blockquote>\n\n\n\n<p><\/p>\n\n\n\n<p>Was playing around with&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/kafka.apache.org\/\" target=\"_blank\">Kafka<\/a>&nbsp;and an interesting use case for tracking and storing temperature readings from electronic sensor devices at real time came through. After evaluating a couple of different approaches and directions,&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/kafka.apache.org\/21\/javadoc\/org\/apache\/kafka\/streams\/kstream\/KStream.html\" target=\"_blank\"><strong>Kafka Streams<\/strong><\/a><strong>&nbsp;<\/strong>emerged as the most suitable framework.<\/p>\n\n\n\n<p>Even with Kafka, leveraging Apache Kafka, deploying zookeeper, maintaining&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/docs.confluent.io\/platform\/current\/schema-registry\/index.html\" target=\"_blank\"><strong>schema registry<\/strong><\/a>&nbsp;etc. proved to be a hazzle. The better alternative was&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/www.confluent.io\/\" target=\"_blank\">Confluent Kafka<\/a>, as they had a subscription based model in all the major cloud providers. With&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/www.confluent.io\/blog\/enabling-exactly-once-kafka-streams\/\" target=\"_blank\"><em>Exactly-once semantics<\/em><\/a><em>&nbsp;<\/em>provided by Kstremas, it turned out to be the defacto choice in server side, while&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/spring.io\/projects\/spring-boot\" target=\"_blank\"><strong>Spring boot<\/strong><\/a>&nbsp;was leveraged to support the user interface.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"927\" height=\"694\" src=\"https:\/\/newwebsite.nestdigital.com\/wp-content\/uploads\/2023\/07\/1WOzXcITKVVF7G-m2tjsHxA.webp\" alt=\"\" class=\"wp-image-3993\" srcset=\"https:\/\/nestdigital.com\/wp-content\/uploads\/2023\/07\/1WOzXcITKVVF7G-m2tjsHxA.webp 927w, https:\/\/nestdigital.com\/wp-content\/uploads\/2023\/07\/1WOzXcITKVVF7G-m2tjsHxA-300x225.webp 300w, https:\/\/nestdigital.com\/wp-content\/uploads\/2023\/07\/1WOzXcITKVVF7G-m2tjsHxA-768x575.webp 768w\" sizes=\"(max-width: 927px) 100vw, 927px\" \/><\/figure>\n\n\n\n<p class=\"has-text-align-center\">Architecture Diagram<\/p>\n\n\n\n<p>Sensors deployed in the devices will be generating temeperature reading in&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/avro.apache.org\/docs\/1.2.0\/\" target=\"_blank\">avro<\/a>&nbsp;format and will be pushed to kafka topic. Multiple sensors will be sending these readings. We wanted to maintain metadata for these. Schema registry is an excellent tool for solving this challenge. It wil act as a service layer for metadata, which would act as a centralized repository for schemas. Leveraging schema registry, we have more flexibility to interact and exchange data without the challenge of managing and sharing schemas between them.In future, the sensors would be changed and the corresponding schemas would be evolved(<a rel=\"noreferrer noopener\" href=\"https:\/\/docs.confluent.io\/platform\/current\/schema-registry\/avro.html\" target=\"_blank\"><strong>Schema evolution<\/strong><\/a><strong>).&nbsp;<\/strong>This could be easily carried out using schema reigistry.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"namespace\": \"com.appu\",\n  \"type\": \"record\",\n  \"name\": \"equipmentvalue\",\n  \"fields\": &#91;\n    {\n      \"name\": \"serial\",\n      \"type\": \"string\",\n      \"doc\": \"Serial Number of the equipment\"\n\n    },\n    {\n      \"name\": \"owner\",\n      \"type\": \"string\",\n      \"doc\": \"Owner name of the equipment\"\n\n    },\n    {\n      \"name\": \"temp\",\n      \"type\": \"string\",\n      \"doc\": \"Temperature in degree celsius of the equipment\"\n\n    }\n  ]\n}<\/code><\/pre>\n\n\n\n<p id=\"80be\">These streams of data will be saved as a&nbsp;<a href=\"https:\/\/kafka.apache.org\/24\/javadoc\/org\/apache\/kafka\/streams\/kstream\/KTable.html\" rel=\"noreferrer noopener\" target=\"_blank\">Ktable<\/a>. It represents the latest state of the data at a particular point in time. This data will be tracked in the Web UI.<\/p>\n\n\n\n<p id=\"1826\">There are static datas such as name, phone number etc., that are not real time values. These datas usually reside in databases or file systems. We need implement a&nbsp;<strong>Change Data Capture (CDC)<\/strong>&nbsp;to capture changes in these fields.&nbsp;<a href=\"https:\/\/docs.confluent.io\/platform\/current\/connect\/index.html\" rel=\"noreferrer noopener\" target=\"_blank\"><strong>Kafka connect<\/strong><\/a>&nbsp;helps us to tackle this. Kafka source connector could pull the data from file\/table to a topic. It reduces the overhead of writing a producer\/consumer duo to do the same. A Ktable join based on the key will capture this static change.<\/p>\n\n\n\n<p id=\"b2a9\">One of the challenges was to write&nbsp;<strong>unit test case<\/strong>&nbsp;for the application. We did not want to touch the existing cluster and wanted a solution that could run the tests without the need of kafka installation.&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/kafka.apache.org\/documentation\/streams\/developer-guide\/testing.html\" target=\"_blank\">kafka-streams-test-utils<\/a>&nbsp;helps us to achieve that.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> public void setup ()\n    {\n        Properties props = new Properties();\n        EquipmentAnalytics.runAnalytics(builder);\n\n        Topology topology = builder.build();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"device-temperature-analytics-test-001\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy:1234\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        topologyTestDriver = new TopologyTestDriver(topology,props);\n       }<\/code><\/pre>\n\n\n\n<p>As we were only dealing with the server side for now, we have developed a python based framework for producing mock data from both sensor and connect. The framework can be configured to simulate various scenarios such as metadata update, schema evolution etc.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;kafka]=\nbootstrap.servers = localhost:9092\nschema.registry.url = http:\/\/localhost:8081\ntopic = equipment\nequipment_topic_json = equipmentJson\nequipment_meta_json = equipmentMeta\nmock_data = resources\/data\/equipment\/equipment-mock\nequipment_json_mock_data = resources\/data\/equipment\/equipment-json-mock\nequipment_meta_mock_data = resources\/data\/equipment\/equipment-meta-mock\n\n\n&#91;avro]=\nequipment-key-schema = resources\/schemas\/avro\/equipment\/equipment-key.avsc\nequipment-value-schema = resources\/schemas\/avro\/equipment\/equipment-value.avsc<\/code><\/pre>\n\n\n\n<p>The latest flow of temeperature readings is displayed in the web ui using websocket and springboot using a line graph. It also displays the latest temperature readings.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"http:\/\/newwebsite.nestdigital.com\/wp-content\/uploads\/2023\/07\/1r5Gt0LWj3xz0_ZhfH2i_2g-1.gif\" alt=\"\" class=\"wp-image-3995\"\/><\/figure>\n\n\n\n<p class=\"has-text-align-center\">Live Web Ui<\/p>\n\n\n\n<p id=\"8996\">In future this framework could be expanded to do various use cases such as finding the average temeperature in a window period, to store reading in a database or to send alerts when temeprate is above\/below a threshold and much much more.<\/p>\n\n\n\n<p id=\"d1ff\"><strong>Links :<\/strong><\/p>\n\n\n\n<p id=\"a613\"><strong>Data Generation :<\/strong>&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/appuv\/KafkaDataGen\" target=\"_blank\">https:\/\/github.com\/appuv\/KafkaDataGen<\/a><\/p>\n\n\n\n<p id=\"8961\"><strong>Temperature Analytics :<\/strong>&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/appuv\/KafkaTemperatureAnalytics\" target=\"_blank\">https:\/\/github.com\/appuv\/KafkaTemperatureAnalytics<\/a><\/p>\n\n\n\n<p id=\"b360\"><strong>Web UI :<\/strong>&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/appuv\/Live-Dashboard-using-Kafka-and-Spring-Websocket\" target=\"_blank\">https:\/\/github.com\/appuv\/Live-Dashboard-using-Kafka-and-Spring-Websocket<\/a><\/p>\n\n\n\n<p id=\"7aca\">There is a recording of the working in my&nbsp;<a href=\"https:\/\/www.youtube.com\/channel\/UCSMeGTVvGIFpBP9BhT_89Aw\" rel=\"noreferrer noopener\" target=\"_blank\">YouTube channel<\/a>&nbsp;:&nbsp;<a href=\"https:\/\/youtu.be\/Cj3BeA4bV1c\" rel=\"noreferrer noopener\" target=\"_blank\">https:\/\/youtu.be\/Cj3BeA4bV1c<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Life is a series of natural and spontaneous changes. Don\u2019t resist them -that only creates sorrow. Let reality be reality. Let things flow naturally forward. \u2014 Lao-Tzu, 6th\u20135th century BCE Was playing around with&nbsp;Kafka&nbsp;and an interesting use case for tracking and storing temperature readings from electronic sensor devices at real time came through. After evaluating [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":5658,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"footnotes":"","wds_primary_category":16},"categories":[16],"tags":[36],"blocksy_meta":"","_links":{"self":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts\/3992"}],"collection":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/comments?post=3992"}],"version-history":[{"count":0,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/posts\/3992\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/media\/5658"}],"wp:attachment":[{"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/media?parent=3992"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/categories?post=3992"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/nestdigital.com\/wp-json\/wp\/v2\/tags?post=3992"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}